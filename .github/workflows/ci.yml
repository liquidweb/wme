name: "CI/CD"

on:
  push:
    branches:
      - main
      - 1.0-branch
      - 2.0-branch
      - 'release/**'
  pull_request:
    types: [opened, synchronize]
    
env:
  E2E_ARTIFACT: e2e-run-${{ github.run_id }}-${{ github.run_number }}

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Install Dependencies
    timeout-minutes: 15
    runs-on: ubuntu-latest
    outputs:
      composer-files-dir: ${{ steps.composer-cache.outputs.composer-files-dir }}

    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7
          run_install: false

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          
      - name: Setup PHP, with Composer and Extensions
        uses: shivammathur/setup-php@v2
        with:
          tools: composer:v2
          php-version: '8.0'
          
      - name: Setup Problem Matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"
          
      - name: Get Cache Files Directory
        id: composer-cache
        working-directory: plugins/wme-sitebuilder
        run: |
          echo "composer-files-dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Prepare Node Modules Cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Prepare Composer Dependencies Cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.composer-cache.outputs.composer-files-dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      # Install playwright's binary under custom directory to cache
      - name: Set Playwright path (non-windows)
        if: runner.os != 'Windows'
        run: echo "PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/playwright-bin" >> $GITHUB_ENV
      - name: Set Playwright path (windows)
        if: runner.os == 'Windows'
        run: echo "PLAYWRIGHT_BROWSERS_PATH=$HOME\.cache\playwright-bin" >> $env:GITHUB_ENV

      - name: Cache Playwright's binary
        uses: actions/cache@v3
        with:
          # Playwright removes unused browsers automatically
          # So does not need to add playwright version to key
          key: ${{ runner.os }}-playwright-bin-v1
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

  lint:
    name: Lint JS and PHP
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7
          run_install: false

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          
      - name: Setup PHP, with Composer and Extensions
        uses: shivammathur/setup-php@v2
        with:
          tools: composer:v2
          php-version: '8.0'

      - name: Setup Problem Matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Prepare Node Modules Cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Prepare Composer Dependencies Cache
        uses: actions/cache@v3
        with:
          path: |
            ${{needs.build.outputs.composer-files-dir}}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      # Install playwright's binary under custom directory to cache
      - name: Set Playwright path (non-windows)
        if: runner.os != 'Windows'
        run: echo "PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/playwright-bin" >> $GITHUB_ENV
      - name: Set Playwright path (windows)
        if: runner.os == 'Windows'
        run: echo "PLAYWRIGHT_BROWSERS_PATH=$HOME\.cache\playwright-bin" >> $env:GITHUB_ENV

      - name: Cache Playwright's binary
        uses: actions/cache@v3
        with:
          # Playwright removes unused browsers automatically
          # So does not need to add playwright version to key
          key: ${{ runner.os }}-playwright-bin-v1
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Lint
        run: pnpm lint
    
  e2e-tests:
    name: End-to-End Testing (via Playwright)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    needs: build
    env:
      ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/wme-sitebuilder/tests/results/allure-report
      ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/wme-sitebuilder/tests/results/allure-results
      DEFAULT_TIMEOUT_OVERRIDE: 30000
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7
          run_install: false

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          
      - name: Setup PHP, with Composer and Extensions
        uses: shivammathur/setup-php@v2
        with:
          tools: composer:v2
          php-version: '8.0'
          
      - name: Setup Problem Matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Prepare Node Modules Cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Prepare Composer Dependencies Cache
        uses: actions/cache@v3
        with:
          path: |
            ${{needs.build.outputs.composer-files-dir}}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      # Install playwright's binary under custom directory to cache
      - name: Set Playwright path (non-windows)
        if: runner.os != 'Windows'
        run: echo "PLAYWRIGHT_BROWSERS_PATH=$HOME/.cache/playwright-bin" >> $GITHUB_ENV
      - name: Set Playwright path (windows)
        if: runner.os == 'Windows'
        run: echo "PLAYWRIGHT_BROWSERS_PATH=$HOME\.cache\playwright-bin" >> $env:GITHUB_ENV

      - name: Cache Playwright's binary
        uses: actions/cache@v3
        with:
          # Playwright removes unused browsers automatically
          # So does not need to add playwright version to key
          key: ${{ runner.os }}-playwright-bin-v1
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build
        
      - name: Get installed Playwright version
        run: |
          echo "playwright_version=$(pnpm list -r --parseable | grep -m 1 playwright+test | cut -d "@" -f3)" >> $GITHUB_ENV
          
      - name: Install Playwright Dependencies
        run: |
          npx playwright@${{ env.playwright_version }} install chromium --with-deps

      - name: Launch wp-env End-to-End Environment
        working-directory: plugins/wme-sitebuilder
        run: pnpm env:dev

      - name: Run Sitebuilder End-to-End tests
        timeout-minutes: 15
        working-directory: plugins/wme-sitebuilder
        run: pnpm test

      - name: Generate Playwright E2E Test Report
        if: success() || failure()
        working-directory: plugins/wme-sitebuilder
        run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

      - name: Archive E2E Test Report
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.E2E_ARTIFACT }}
          path: |
            ${{ env.ALLURE_RESULTS_DIR }}
            ${{ env.ALLURE_REPORT_DIR }}
          if-no-files-found: ignore
          retention-days: 5
  
  deploy:
    if: ${{ github.ref_name == 'main' || github.ref_name == '1.0-branch' || github.ref_name == '2.0-branch' }}
    name: Deploy to Test Sites    
    needs: [build, lint, e2e-tests]
    uses: ./.github/workflows/deploy.yml
    secrets:
      ssh-key: ${{ secrets.SITEBUILDER_SSH_PRIVATE_KEY }}

